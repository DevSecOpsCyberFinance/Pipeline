pipeline {
  agent any

  parameters {
    string(name: 'FRONTEND_URL', defaultValue: 'http://192.168.0.20:3000/', description: 'URL del frontend que ZAP debe escanear')
    string(name: 'ZAP_IMAGE', defaultValue: 'zaproxy/zap-stable:latest', description: 'Imagen docker de ZAP')
    string(name: 'SCAN_MAX_MINUTES', defaultValue: '10', description: 'Timeout aproximado para el scan (minutos) pasado a zap-full-scan.py -m')
    booleanParam(name: 'FAIL_ON_HIGH', defaultValue: true, description: 'Si true -> el job fallará si se encuentran alertas High')
    booleanParam(name: 'USE_NETWORK_HOST', defaultValue: true, description: 'Usar --network host en docker run (Linux; desactivar si agente no corre en la misma máquina)')
  }


  options {
    timeout(time: 60, unit: 'MINUTES')
    ansiColor('xterm')
  }

  stages {


    stage('Comprobar accesibilidad del target') {
      steps {
        sh '''
          echo "Comprobando ${FRONTEND_URL} ..."
          for i in $(seq 1 20); do
            if curl -sSf --max-time 5 "${FRONTEND_URL}" >/dev/null 2>&1; then
              echo "Target responde en intento $i"
              break
            fi
            echo "Intento $i: target no responde todavía"
            sleep 3
          done
          if ! curl -sSf --max-time 5 "${FRONTEND_URL}" >/dev/null 2>&1; then
            echo "ERROR: target ${FRONTEND_URL} no responde. Aborting."
            exit 1
          fi
        '''
      }
    }

    stage('ZAP - Full scan (activo)') {
      steps {
        script {
          env.ZAP_REPORT_DIR = "${env.WORKSPACE}/zap-reports"
          sh "mkdir -p '${env.ZAP_REPORT_DIR}'"
    
          def netFlag = params.USE_NETWORK_HOST.toBoolean() ? "--network host" : ""
          def zapImage = params.ZAP_IMAGE
          def target = params.FRONTEND_URL
          def minutes = params.SCAN_MAX_MINUTES
    
          def cmd = "docker run --rm -v '${env.ZAP_REPORT_DIR}':/zap/wrk/:rw,Z ${netFlag} ${zapImage} zap-full-scan.py -t '${target}' -r /zap/wrk/full_report.html -j /zap/wrk/full_report.json -m ${minutes}"
    
          echo "Ejecutando ZAP..."
          def rc = sh(script: cmd, returnStatus: true)
          echo "ZAP exit code: ${rc}"
          env.ZAP_EXIT_CODE = rc.toString()
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'zap-reports/**', fingerprint: true, allowEmptyArchive: false
    }
  }
}

