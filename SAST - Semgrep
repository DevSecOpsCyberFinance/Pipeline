pipeline {
  agent any

  parameters {
    booleanParam(name: 'FAIL_ON_FINDINGS', defaultValue: false, description: 'Si true -> el job falla si hay vulnerabilidades.')
  }

  environment {
    SRC = '/projects/Cyberfinance-Bank-main'
    IMG = 'returntocorp/semgrep:latest'
    ANALYZE_TARGETS = 'Backend,Frontend'
  }

  stages {
    stage('Prepare workspace (rsync without owner/perms)') {
      steps {
        sh '''
          set -e
          rm -rf "$WORKSPACE"/* || true
          rsync -r --delete --exclude='.git' --exclude='node_modules' \
            --no-owner --no-group --no-perms \
            --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r \
            "${SRC}/" "$WORKSPACE/"
          echo "Permisos y contenido del workspace:"
          ls -ld "$WORKSPACE"
          ls -l "$WORKSPACE" | head -n 50
        '''
      }
    }

    stage('Semgrep (sequential)') {
      steps {
        script {
          def targets = (env.ANALYZE_TARGETS ?: '').tokenize(',').collect { it.trim() }.findAll { it }
          if (targets.isEmpty()) {
            echo "ANALYZE_TARGETS vacío — nothing to scan."
          } else {
            for (t in targets) {
              def safe = t.replaceAll(/[\\/\\s]+/, '-')
              echo "Analizando target: ${t} -> semgrep-${safe}.json"
              sh """
                set -e
                docker run --rm -u "\$(id -u):\$(id -g)" -e HOME=/tmp -v "$WORKSPACE":/src ${IMG} \\
                  semgrep scan --config=auto --json --output /src/semgrep-${safe}.json /src/${t} || true
              """
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'semgrep-*.json', allowEmptyArchive: true, fingerprint: true
        }
      }
    }

    stage('Summarize & conditional exit') {
      steps {
        sh '''
          set -euo pipefail

          rm -f semgrep-report-summary.txt
          total=0

          for f in semgrep-*.json; do
            [ -f "$f" ] || continue

            # contar 'results' con python (una sola línea)
            cnt=$(python3 -c "import json,sys; print(len(json.load(open(sys.argv[1])).get('results',[])))" "$f" 2>/dev/null || echo 0)

            # sanitizar cnt
            case "$cnt" in ''|*[!0-9]*) cnt=0 ;; esac

            echo "$f=$cnt" >> semgrep-report-summary.txt
            total=$(( total + cnt ))
          done

          # asegurar que exista el resumen
          if [ ! -f semgrep-report-summary.txt ]; then
            echo "total_findings=0" > semgrep-report-summary.txt
          else
            echo "total_findings=${total}" >> semgrep-report-summary.txt
          fi

          cat semgrep-report-summary.txt

          # decidir exit según FAIL_ON_FINDINGS
          if [ "${FAIL_ON_FINDINGS:-false}" = "true" ] && [ "${total:-0}" -gt 0 ]; then
            echo "FAIL_ON_FINDINGS=true y total>0 -> saliendo con código 1"
            exit 1
          fi

          exit 0
        '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'semgrep-report-summary.txt', allowEmptyArchive: true, fingerprint: true
          sh 'echo "Summary: $(cat semgrep-report-summary.txt 2>/dev/null || echo no-summary)"'
        }
      }
    }

  } 

  post {
    success { echo "Security pipeline: final SUCCESS." }
    failure { echo "Security pipeline: final FAILURE (revisa artefactos)." }
  }
} 
